exit
instances.last.association(:ingredients)
instances.last.association(:ingredients).through_records
instances.last.association(:ingredients)
instances.last
instances
c
trc.attributes
trc.vendor
trc.ingredient
trc
trc = v.association(:ingredients).send(:build_through_record, v.ingredients.last)
tr
tr = v.association(:ingredients).send(:build_through_record, v.ingredients.last)
tr = v.association(:ingredients).send(:build_through_record)
tr = v.association(:ingredients).build_through_record
tr = v.association(:ingredients).options
tr = v.association(:ingredients).send(:through_association).build
v.association(:ingredients).send(:through_association)
v.association(:ingredients)
v.association
puts v
v
v.associations
v.class.reflect_on_association(:ingredients).through_reflection
v.class.reflect_on_association(:ingredients).association_class
v.class.reflect_on_association(:ingredients)
v.reflect_on_association(:ingredients)
exit
c
self.record
record
self
c
where
backtrace
stack
c
restart
down
require 'pry-stack_explorer'
caller(0)
caller
backtrace
t
trace
stack
l
c
assoc.send(:through_association)
v.ingredients.last
v.ingredients
assoc.send(:build_through_record, v.ingredients.last)
assoc.send(:build_through_record)
assoc = ActiveRecord::Associations::HasManyThroughAssociation.new(v, v.class.reflections["ingredients"])
ActiveRecord::Associations::HasManyThroughAssociation.new(v, v.class.reflections["ingredients"])
ActiveRecord::Associations::HasManyThroughAssociation.new(v.ingredients.first, v.class.reflections["ingredients"])
ActiveRecord::Associations::HasManyThroughAssociation
ActiveRecord::Associations::HasAndBelongsToManyAssociation
ActiveRecord::Associations::HasAndBelongsToManyThroughAssociation
ActiveRecord::Associations::HasManyThroughAssociation
ActiveRecord::Associations
ActiveRecord::Association
v.class.reflect_on_all_associations
v.class.reflect_on_all_associations.first.send(:build_through_record, v.ingredients.last)
v.class.reflect_on_all_associations.first
v.class.reflect_on_all_associations
v.reflect_on_all_associations
c
through_record
n
options_for_through_record
*options_for_through_record
through_association
through_record
n
through_record
n
s
record
n
record
c
self
record
c
AR::Vendor.reflections["ingredients"]
AR::Vendor.reflections
AR::Vendor.last
c
n
s
n
status
n
s
n
s
value
n
s
n
s
n
s
n
s
n
s
n
s
n
s
n
s
n
s
n
s
c
status
n
s
n
s
c
vnd.class.reflections
vnd
vnd.reflections
ref
ref.through_model
ref
ref.association
vnd.class.associations
vnd.class
vnd.calss
vnd.clss
ref
ref.join_table
vnd.send(:associated_records_to_validate_or_save, ref, false, true)
vnd.send(:associated_records_to_validate_or_save, ref)
vnd.send(:associated_records_to_validate_or_save, ref["ingredients"])
vnd.send(:associated_records_to_validate_or_save)
vnd.associated_records_to_validate_or_save
vnd
ref.join_dependency
ref.join_table
ref
ref = vnd.class.reflections["ingredients"]
vnd = AR::Vendor.find(2)
c
ref.construct_join_attributes
ref
ref = vnd.class.reflections["ingredients"]
vnd.class.reflections["ingredients"]
vnd.ingredients
vnd.ingredients.first.to_sql
vnd.ingredients.to_sql
vnd.class.reflections["ingredients"]
vnd.class.reflections["ingredients"].source_reflection
vnd.class.reflections["ingredients"].through_reflection
vnd.class.reflections["ingredients"].join_table
vnd.class.reflections["ingredients"].mapping
vnd.class.reflections["ingredients"].inverse_of
vnd.class.reflections["ingredients"].class_name
vnd.class.reflections["ingredients"].through_table
vnd.class.reflections["ingredients"].table_name
vnd.class.reflections["ingredients"]
vnd.class.reflections["ingredients"].through_model
vnd.class.reflections["ingredients"]
vnd.class.reflections
vnd.class
vnd.ingredients.class
vnd.ingredients.through_model
vnd.ingredients
vnd.save
vnd.ingredients.build({ name: "test", quantity: "1"})
vnd = AR::Vendor.find(2)
AR::Vendor.find(2).ingredients.to_sql
AR::Vendor.find(2).ingredients.last
AR::Vendor.find(2).ingredients.first
AR::Vendor.find(2).ingredients
AR::Vendor.last.ingredients
Vendor.last.ingredients
vendor.reload.ingredients
vendor.ingredients
vendor = instances.last
vendor.ingredients
kls.ingredients
kls.reflections
kls
instances.last.associations
instances.last.ingredients
instances.last.associations
instances
kls.associations
kls.relations
kls.associations
kls = instances.last.class
instances.last.class
instances.last.relations
instances.last.associations
instances.last
instances
c
puts @selects.map { |s| s[:sql] }
@selects.map { |s| s[:sql] }
@selects.map { |s| s.sql }
@selects
c
AR::Ingredient.last.vendors
AR::Ingredient.last
AR::Vendor.second.ingredients
AR::Ingredient.count
AR::Vendor.first.ingredients
AR::Vendor.first
AR::Vendor.count
AR::Vendor
Vendor
AR::Recipe.first.ingredients.last.vendors
AR::Recipe.first.ingredients.last
AR::Recipe.first.ingredients
AR::Recipe.first
